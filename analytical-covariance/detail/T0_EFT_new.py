# -*- coding: utf-8 -*-
"""
Created on Mon Nov 15 13:03:12 2021

@author: Yansiang
"""

# Here are the expressions used to calculate the tree-level trispectrum
# These (horrible) expressions were copy-pasted from the
# mathematica notebook (Generating_T0_Z12_expressions.nb),
# which shows their derivation

import numpy as np
# from numba import jit

def InitParameters(arr):
    global be, b1, b2, b3, b4, b5
    [be, b1, b2, b3, b4, b5]=arr

# Shot noise term in Eq. 92
# @jit(nopython=True)
def e24o44(u12,k1,k2):
    if(l1==0 and l2==0):
        return(1 + (2*be)/3. + be**2/5.)
    elif(l1==0 and l2==2):
        return((2*be*(7 + 3*be)*(2*k2**2 + 4*k1*k2*u12 + k1**2*(-1 + 3*u12**2)))/(21.*(k1**2 + k2**2 + 2*k1*k2*u12)))
    elif(l1==2 and l2==2):
        return((5*((21 + be*(22 + 9*be))*k1**4*(-1 + 3*u12**2) + 
           (21 + be*(22 + 9*be))*k2**4*(-1 + 3*u12**2) + 
           4*k1**3*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
           4*k1*k2**3*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
           2*k1**2*k2**2*(-21 - 22*be - 3*be**2 + (21 + be*(46 + 21*be))*u12**2 + 
              18*(7 + 2*be*(3 + be))*u12**4)))/(42.*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

# First Z1 Z1 Z2 shot noise term in Eq. 91
# @jit(nopython=True)
def e34o44_1(k1,k2):
    if(l1==0 and l2==0):
        if(k1!=k2):
            return((140*b1*(13 + 21*b1)*be + 980*b4*(3 + be)**2 + (28*b2*(1275 + be*(850 + 147*be)))/5. + 
         (b1*be**2*(45*(7 + 3*be)*k1**8 - 120*(7 + 3*be)*k1**6*k2**2 + 2*(9765 + 2493*be + 196*b1*(95 + 9*be*(5 + be)))*k1**4*k2**4 - 
              120*(7 + 3*be)*k1**2*k2**6 + 45*(7 + 3*be)*k2**8))/(10.*k1**4*k2**4) + 
         (9*b1*be**2*(7 + 3*be)*(k1**2 - k2**2)**4*(k1**2 + k2**2)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2)))/(8.*k1**5*k2**5))/(8820.*b1**2))
        else:
            return((175*b4*(3 + be)**2 + b2*(1275 + be*(850 + 147*be)) + b1*be*(5 + 3*be)*(65 + 27*be + 7*b1*(15 + be*(10 + 3*be))))/(1575.*b1**2))
    if(l1==0 and l2==2):
        if(k1!=k2):
            return((be*(4*k1*k2*(45*b1*be**2*k1**10 + 15*b1*(63 + 4*be*(15 + be))*k1**8*k2**2 - 3*b1*(1155 + be*(1070 + 157*be))*k1**6*k2**4 + 
              (32*(245*b4*(3 + be) + b2*(623 + 213*be)) + b1*(11095 + 3*be*(5286 + 1751*be)) + 112*b1**2*(105 + be*(230 + 9*be*(17 + 4*be))))*
               k1**4*k2**6 + 15*b1*(63 + 2*(19 - 9*be)*be)*k1**2*k2**8 + 45*b1*be*(2 + 3*be)*k2**10) + 
           45*b1*(k1 - k2)**4*(k1 + k2)**4*(be**2*k1**4 + (21 + 5*be*(4 + be))*k1**2*k2**2 + be*(2 + 3*be)*k2**4)*
           (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(141120.*b1**2*k1**5*k2**7))
        else:
            return((be*(490*b4*(3 + be) + 2*b2*(623 + 213*be) + b1*(595 + 3*be*(296 + 99*be)) + 7*b1**2*(105 + be*(230 + 9*be*(17 + 4*be)))))/(2205.*b1**2))
    if(l1==2 and l2==2):
        if(k1!=k2):
            return((827904*b2 + 867328*b2*be + 1790976*b2*be**2 + 1931776*b4*be**2 + 
         (b1*be*(4*k1*k2*(315*be*(33 + 19*be)*k1**12 - 210*(-99 + be*(-33 + 16*be))*k1**10*k2**2 - 
                 21*(2640 + 7*be*(473 + 139*be))*k1**8*k2**4 + 
                 4*(86317 + 4928*b1*be*(7 + 3*be)*(7 + 6*be) + 3*be*(65373 + 34648*be))*k1**6*k2**6 - 
                21*(2640 + 7*be*(473 + 139*be))*k1**4*k2**8 - 210*(-99 + be*(-33 + 16*be))*k1**2*k2**10 + 315*be*(33 + 19*be)*k2**12) + 
              315*(k1 - k2)**4*(k1 + k2)**4*(k1**2 + k2**2)*
               (be*(33 + 19*be)*k1**4 + 2*(33 + 5*be*(11 + 4*be))*k1**2*k2**2 + be*(33 + 19*be)*k2**4)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/
          (k1**7*k2**7))/(4.346496e6*b1**2))
        else:
            return((4*be*(343*b4*be + 14*b1**2*be*(7 + 3*be)*(7 + 6*be) + b1*(7 + 6*be)*(28 + 45*be)) + 4*b2*(147 + 2*be*(77 + 159*be)))/(3087.*b1**2))

# Second Z1 Z1 Z2 shot noise term in Eq. 91
# @jit(nopython=True)
def e34o44_2(u12,k1,k2):

    if(l1==0 and l2==0):
        return((-7*b1**2*be*k2**2*(k2**3*u12*(3*(1 + be)*(35 + be*(28 + 5*be)) + 4*be**2*(9 + 5*be)*u12**2) + 
            3*k1**2*k2*u12*(-35 + 49*be + 51*be**2 + 15*be**3 + 4*(35 + be*(35 + be*(21 + 5*be)))*u12**2) + 
            k1**3*(-105 - 21*be + 9*be**2 + 5*be**3 + 6*(35 + be*(35 + be*(21 + 5*be)))*u12**2) + 
            3*k1*k2**2*(-35 - 7*be + 15*be**2 + 3*be**3 + 4*(35 + be*(49 + 6*be*(4 + be)))*u12**2 + 8*be**2*(3 + be)*u12**4)) + 
        42*k1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))*
         ((15 + be*(10 + 3*be))*k1**2 + 2*(15 + be*(10 + 3*be))*k1*k2*u12 + k2**2*(15 + be*(10 + be + 2*be*u12**2))) - 
         3*b1*(98*(15 + be*(10 + 3*be))*k1**5 + 392*(15 + be*(10 + 3*be))*k1**4*k2*u12 + 
            k1**3*k2**2*(735*(3 + 10*u12**2) + be*(1505 + 259*be + 3*be**2 + 2*(2555 + be*(889 + 15*be))*u12**2 + 24*be*(7 + 3*be)*u12**4)) + 
            k1**2*k2**3*u12*(735*(7 + 4*u12**2) + be*(3745 + 791*be + 39*be**2 + 4*(595 + be*(385 + 51*be))*u12**2 + 
                  24*be*(7 + 3*be)*u12**4)) + k1*k2**4*(735*(1 + 4*u12**2) + 
               be*(525 + 77*be + 3*be**2 + 4*(665 + be*(266 + 39*be))*u12**2 + 4*be*(119 + 39*be)*u12**4)) + 
            7*k2**5*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2)))))/(4410.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==0 and l2==2):
        return(-(be*(7*b1**2*k2**2*(k2**3*u12*(462 + 3*be*(297 + be*(176 + 25*be)) + be*(297 + be*(462 + 205*be))*u12**2) + 
               6*k1**2*k2*u12*(-77 - 11*be + 33*be**2 + 15*be**3 + (308 + be*(407 + 5*be*(66 + 19*be)))*u12**2 + 
                  6*be*(33 + be*(22 + 5*be))*u12**4) + k1**3*
               (-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 36*be*(33 + be*(22 + 5*be))*u12**4) + 
               6*k1*k2**2*(-77 - 55*be + 11*be**2 + 3*be**3 + (308 + be*(451 + 3*be*(88 + 23*be)))*u12**2 + 
                  2*be*(99 + 2*be*(55 + 17*be))*u12**4)) + 
            33*b1*(28*(7 + 3*be)*k1**5*(-1 + 3*u12**2) + 28*(7 + 3*be)*k1**4*k2*u12*(-1 + 9*u12**2) + 
               7*k2**5*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
               2*k1**2*k2**3*u12*(161 + 34*be + 3*be**2 + 2*(385 + be*(244 + 23*be))*u12**2 + 2*(147 + 4*be*(24 + 7*be))*u12**4) + 
               k1*k2**4*(63 + 20*be + be**2 + (623 + be*(404 + 57*be))*u12**2 + 4*(147 + be*(125 + 38*be))*u12**4) + 
               2*k1**3*k2**2*(7 - 13*be + (434 + be*(199 + 3*be))*u12**2 + 2*(441 + 2*be*(111 + 5*be))*u12**4 + 12*be**2*u12**6)) - 
           66*k1*(2*(7 + 3*be)*k1**2*(-1 + 3*u12**2) + 2*(7 + 3*be)*k1*k2*u12*(1 + 3*u12**2) + k2**2*(7 + be + (21 + 11*be)*u12**2))*
             (7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))))/
       (9702.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((-5*(7*b1**2*be*k2**2*(k2**3*u12*(-3*(715 + be*(1287 + be*(533 + 25*be))) + (11583 + be*(27027 + be*(16809 + 2885*be)))*u12**2 + 
                 120*be**2*(39 + 25*be)*u12**4) + 3*k1**2*k2*u12*
               (2431 - be*(1001 + be*(923 + 75*be)) - 8437*u12**2 + be*(5291 + 5*be*(1729 + 577*be))*u12**2 + 
                 12*(1287 + be*(1573 + 2*be*(507 + 125*be)))*u12**4) + 
             3*k1*k2**2*(1573 + 1001*be - 325*be**2 - 33*be**3 + (-7579 + be*(-5291 + 3*be*(793 + 257*be)))*u12**2 + 
                 4*(3861 + be*(6864 + be*(3679 + 998*be)))*u12**4 + 120*be**2*(26 + 9*be)*u12**6) + 
             k1**3*(be*(429 - 5*be*(39 + 29*be)) + 3*be*(-2717 + be*(-403 + 245*be))*u12**2 + 
                 18*(1287 + be*(1716 + be*(1183 + 290*be)))*u12**4 + 429*(11 - 43*u12**2))) - 
           858*k1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))*
           ((21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2) + 2*k1*k2*u12*(-21 - 16*be - 3*be**2 + 3*(21 + be*(20 + 7*be))*u12**2) + 
              k2**2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))) + 
          39*b1*(154*(21 + be*(22 + 9*be))*k1**5*(-1 + 3*u12**2) + 
              616*k1**4*k2*u12*(-21 - 19*be - 6*be**2 + 3*(21 + be*(21 + 8*be))*u12**2) + 
              k1*k2**4*(-(be*(1815 + be*(187 + 5*be))) - 11*be*(257 + be*(89 + 3*be))*u12**2 + 
                 4*(4851 + be*(6666 + be*(2981 + 488*be)))*u12**4 + 24*be**2*(187 + 69*be)*u12**6 - 1617*(1 + u12**2)) + 
              k1**3*k2**2*(-(be*(5203 + be*(869 + 5*be))) + be*(1639 + be*(-55 + 9*be))*u12**2 + 
                 2*(24255 + be*(24651 + 5*be*(2013 + 37*be)))*u12**4 + 48*be**2*(33 + 17*be)*u12**6 - 1617*(3 + u12**2)) + 
              k1**2*k2**3*u12*(-(be*(12023 + be*(1705 + 41*be))) + be*(31537 + be*(7711 + 463*be))*u12**2 + 
                4*(4851 + be*(5709 + be*(3993 + 607*be)))*u12**4 + 144*be**2*(11 + 5*be)*u12**6 + 1617*(-7 + 17*u12**2)) + 
              7*k2**5*u12*(231*(-1 + 3*u12**2) + be*(363*(-1 + 3*u12**2) + be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4)))))
         )/(252252.*b1**2*k1*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

# First Z1^2 Z2^2 term in Eq. 25
# @jit(nopython=True)
def e44o44_1(u12,k1,k2):

    if(l1==0 and l2==0):
        return((12012*(15 + be*(10 + 3*be))*k1**2*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))**2 + 
         49*b1**4*be**2*k2**4*(k1**2*(9009 - 858*be**2 + 105*be**4 + 4*(-6006 + be*(-1287 + be*(1144 + 105*be*(13 + 4*be))))*u12**2 + 
               8*(3003 + be*(3861 + be*(3289 + 105*be*(13 + 2*be))))*u12**4) + 
           2*k1*k2*u12*(3003*(-1 + 4*u12**2) + 2574*be*(-1 + 11*u12**2) + 910*be**3*(3 + 11*u12**2 + 4*u12**4) + 
               105*be**4*(5 + 20*u12**2 + 8*u12**4) + 286*be**2*(11 + 78*u12**2 + 16*u12**4)) + 
           k2**2*(3003*(1 + 2*u12**2) + 5148*be*(1 + 4*u12**2) + 780*be**3*(1 + 12*u12**2 + 8*u12**4) + 
               286*be**2*(11 + 78*u12**2 + 16*u12**4) + 15*be**4*(5 + 90*u12**2 + 120*u12**4 + 16*u12**6))) - 
         1716*b1*k1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))*
          (98*(15 + be*(10 + 3*be))*k1**3 + 196*(15 + be*(10 + 3*be))*k1**2*k2*u12 + 
            k1*k2**2*(735*(1 + 2*u12**2) + be*(525 + 161*be + 3*be**2 + 2*(595 + be*(203 + 15*be))*u12**2 + 24*be*(7 + 3*be)*u12**4)) + 
            7*k2**3*u12*(105 + be*(105 + be*(35 + 3*be + 4*(7 + 3*be)*u12**2)))) + 
         182*b1**3*be*k2**2*(154*k1**3*k2*u12*(-105 + 147*be + 117*be**2 + 25*be**3 + 4*(105 + be*(105 + 4*be*(18 + 5*be)))*u12**2) + 
           154*k1**4*(-105 - 21*be + 9*be**2 + 5*be**3 + 6*(35 + be*(35 + be*(21 + 5*be)))*u12**2) + 
            7*k2**4*u12**2*(1155 + be*(2772 + 3*be*(726 + 5*be*(44 + 5*be)) + 8*be*(99 + 5*be*(22 + 5*be))*u12**2 + 40*be**3*u12**4)) + 
            2*k1*k2**3*u12*(16170*u12**2 + 231*be*(19 + 128*u12**2) + 99*be**2*(44 + 203*u12**2 + 68*u12**4) + 
               11*be**3*(103 + 634*u12**2 + 488*u12**4) + 5*be**4*(18 + 191*u12**2 + 208*u12**4 + 24*u12**6)) + 
            k1**2*k2**2*(462*be*(-5 + 148*u12**2 + 88*u12**4) + 198*be**2*(3 + 211*u12**2 + 182*u12**4 + 24*u12**6) + 
               15*be**4*(1 + 18*u12**2 + 80*u12**4 + 48*u12**6) + 22*be**3*(19 + 386*u12**2 + 676*u12**4 + 144*u12**6) + 
               8085*(-1 + 4*(u12**2 + u12**4)))) + 143*b1**2*
          (4116*(15 + be*(10 + 3*be))*k1**6 + 16464*(15 + be*(10 + 3*be))*k1**5*k2*u12 + 
            28*k1**3*k2**3*u12*(2205*(3 + 4*u12**2) - 35*(b2 + b4)*be**4*(5 + 16*u12**2) + 
               105*be*(51 + 7*b2 + 7*b4 - 4*(-17 + 7*b2 + 7*b4)*u12**2) - 
               9*be**3*(-9 + 91*b2 + 91*b4 + 16*(-3 + 14*b2 + 14*b4)*u12**2 - 48*u12**4) - 
               21*be**2*(-81 + 49*b2 + 49*b4 + 4*(-36 + 35*b2 + 35*b4)*u12**2 - 48*u12**4)) - 
            28*k1**4*k2**2*(-2205*(1 + 6*u12**2) + 35*(b2 + b4)*be**4*(1 + 6*u12**2) + 
               105*be*(-15 - 7*b2 - 7*b4 + 2*(-45 + 7*b2 + 7*b4)*u12**2) + 
               9*be**3*(-1 + 7*b2 + 7*b4 + 2*(-5 + 49*b2 + 49*b4)*u12**2 - 24*u12**4) - 
               21*be**2*(23 + 7*b2 + 7*b4 + 142*u12**2 - 70*(b2 + b4)*u12**2 + 24*u12**4)) + 
            49*k2**6*u12**2*(315 + be*(420 + 3*be*(70 + be*(12 + be)) + 24*be*(7 + be*(6 + be))*u12**2 + 8*be**3*u12**4)) + 
            14*k1*k2**5*u12*(2205*(1 + 2*u12**2) + be*(2310 + 3*be*(280 + be*(30 + be)) - 42*b4*(1 + be)*(35 + be*(28 + 5*be)) + 
                  2*(2520 + be*(1386 + be*(324 + 21*be - 28*b4*(9 + 5*be))))*u12**2 + 8*be*(210 + be*(144 + 19*be))*u12**4 + 
                  48*be**3*u12**6 - 2*b2*(5 + 2*u12**2)*(3*(1 + be)*(35 + be*(28 + 5*be)) + 4*be**2*(9 + 5*be)*u12**2))) + 
            k1**2*k2**4*(-2940*be*(-4 - 5*b2 - 7*b4 + 2*(-30 + 11*b2 + 14*b4)*u12**2 + 4*(-5 + b2)*u12**4) - 
               36*be**3*(-4 + 35*b2 + 49*b4 + 2*(-74 + 791*b2 + 882*b4)*u12**2 + 196*(-3 + 3*b2 + 2*b4)*u12**4 - 240*u12**6) + 
              42*be**2*(89 + 70*b2 + 98*b4 - 4*(-358 + 609*b2 + 686*b4)*u12**2 + 4*(381 - 70*b2)*u12**4 + 336*u12**6) + 
               15435*(1 + 4*u12**2*(3 + u12**2)) + be**4*
               (-980*b4*(1 + 12*u12**2 + 8*u12**4) - 140*b2*(5 + 74*u12**2 + 68*u12**4) + (1 + 6*u12**2)**2*(3 + 8*u12**2*(3 + u12**2))))))/
       (8.82882e6*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
          
    if(l1==0 and l2==2):
        return((be*(-3432*b1*k1*(14*(7 + 3*be)*k1**3*(-1 + 3*u12**2) + 28*(7 + 3*be)*k1**2*k2*u12*(-1 + 3*u12**2) + 
              7*k2**3*u12*(-2*be + (21 + be*(20 + 3*be))*u12**2 + 2*be**2*u12**4) + 
              k1*k2**2*(-42 - 20*be + (91 + be*(38 + 3*be))*u12**2 + 2*(147 + 2*be*(48 + 5*be))*u12**4 + 12*be**2*u12**6))*
            (7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2))) + 
           3432*(7 + 3*be)*k1**2*(-1 + 3*u12**2)*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))**
            2 + 26*b1**2*(6468*(7 + 3*be)*k1**6*(-1 + 3*u12**2) + 25872*(7 + 3*be)*k1**5*k2*u12*(-1 + 3*u12**2) + 
              28*k1**3*k2**3*u12*(7*(231*b2 - 264*(b2 + b4)*be - 99*(b2 + b4)*be**2 - 10*(b2 + b4)*be**3) - 
                 (6468*(b2 + b4) + 66*(-108 + 35*b2 + 35*b4)*be + 297*(-3 + 14*b2 + 14*b4)*be**2 + 1400*(b2 + b4)*be**3)*u12**2 - 
                6*(-3234 + be*(1386*b2 + 33*(-64 + 42*b4 - 9*be) + 924*(b2 + b4)*be + 245*(b2 + b4)*be**2))*u12**4 + 792*be**2*u12**6 + 
                 33*(-84 + 49*b4 - 54*be + 329*u12**2)) + 
              49*k2**6*u12**2*(231*(1 + 3*u12**2) + be*(3*(55 + be*(11 + be)) + 3*(341 + be*(165 + 23*be))*u12**2 + 
                    4*be*(33 + 17*be)*u12**4)) - 14*k1**4*k2**2*
              (-66*(1 + 6*u12**2)*(-42 - 20*be + (147 + be*(74 + 3*be))*u12**2 + 2*be**2*u12**4) + 
                 7*b2*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 36*be*(33 + be*(22 + 5*be))*u12**4) + 
                 7*b4*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 36*be*(33 + be*(22 + 5*be))*u12**4)) + 
              k1**2*k2**4*(-8085 + 3*be*(-1397 + be*(11 + be)) + 3*(4851 + be*(-6523 + 7*be*(99 + 5*be)))*u12**2 + 
                4*(100254 + be*(87714 + be*(13893 + 251*be)))*u12**4 + 132*(1029 + be*(903 + be*(459 + 25*be)))*u12**6 + 
                 144*be**2*(77 + 17*be)*u12**8 + 98*b4*(462 + 33*be + 5*be**3 - 33*(56 + be*(37 + be*(18 + 5*be)))*u12**2 - 
                    8*be*(297 + be*(297 + 70*be))*u12**4 - 120*be**3*u12**6) + 
                 14*b2*(5*(462 + 33*be + 5*be**3) - 11*(924 + be*(765 + be*(342 + 85*be)))*u12**2 - 
                    2*(924 + be*(7161 + 13*be*(594 + 145*be)))*u12**4 - 24*be*(99 + 66*be + 50*be**2)*u12**6)) - 
              14*k1*k2**5*u12*(-3*be**2*(11 + be) - 3*be*(1815 + be*(429 + 29*be))*u12**2 - 
                 2*(4851 + be*(5709 + be*(2145 + 241*be)))*u12**4 - 24*be**2*(55 + 17*be)*u12**6 + 231*(-1 + 14*b4 + be - 27*u12**2) + 
                 14*b4*be*(297*(1 + u12**2) + 99*be*(1 + 4*u12**2) + 5*be**2*(3 + u12**2)*(1 + 6*u12**2)) + 
                 2*b2*(5 + 2*u12**2)*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) + 5*be**3*(3 + u12**2)*(1 + 6*u12**2)))) + 
          49*b1**4*be*k2**4*(4*k1**2*(-39*(-33 + be**2) + (-4719 + be*(-1287 + be*(-572 + 105*be*(1 + be))))*u12**2 + 
                 (4719 + be*(2145 + be*(2951 + 105*be*(17 + 4*be))))*u12**4 + 12*be*(286 + be*(260 + 7*be*(15 + 2*be)))*u12**6) + 
              2*k1*k2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) + 13*be**2*(-31 + 747*u12**2 + 964*u12**4) + 
                 21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) + 5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) + 
              k2**2*(429*(1 + 11*u12**2) + be*(be*(572 + 15*be*(10 + be)) + 3*be*(3952 + 15*be*(98 + 13*be))*u12**2 + 
                    4*(858 + be*(2353 + 15*be*(122 + 27*be)))*u12**4 + 24*be**2*(30 + 23*be)*u12**6 + 858*(1 + 15*u12**2)))) + 
          14*b1**3*k2**2*(182*k1**4*(-462 - 33*be - 5*be**3 + 3*(308 + be*(11 + be*(66 + 35*be)))*u12**2 + 
                 36*be*(33 + be*(22 + 5*be))*u12**4) + 364*k1**3*k2*u12*
               (231*(-1 + 4*u12**2) + 99*be**2*(1 + 6*u12**2 + 8*u12**4) + 66*be*(4 + 5*u12**2 + 18*u12**4) + 
                 10*be**3*(1 + 20*u12**2 + 21*u12**4)) + 
              k1*k2**3*u12*(168168*u12**2 + 429*be*(47 + 625*u12**2 + 504*u12**4) + 429*be**2*(51 + 425*u12**2 + 784*u12**4) + 
                 5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6) + 13*be**3*(397 + 5551*u12**2 + 11612*u12**4 + 2040*u12**6)) + 
              k1**2*k2**2*(15*be**4*(1 + 6*u12**2)*(1 + 57*u12**2 + 128*u12**4 + 24*u12**6) + 
                 429*be*(-19 + 449*u12**2 + 914*u12**4 + 504*u12**6) + 429*be**2*(-1 + 207*u12**2 + 970*u12**4 + 504*u12**6) + 
                 13*be**3*(-29 + 1739*u12**2 + 9754*u12**4 + 7416*u12**6 + 720*u12**8) + 42042*(-1 + 4*(u12**2 + u12**4))) + 
             14*k2**4*u12**2*(3003 + be*(1287*(5 + 3*u12**2) + 
                    be*(429*(11 + 19*u12**2) + 5*be*(273 + 30*be + (1027 + 185*be)*u12**2 + 4*(39 + 25*be)*u12**4)))))))/
       (1.765764e6*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((5*(29172*(21 + be*(22 + 9*be))*k1**2*(-1 + 3*u12**2)*
            (7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))**2 + 
           49*b1**4*be**2*k2**4*(k1**2*(-3*(21879 - 374*be**2 + 63*be**4) + 
                7*(36465 + be*(-2652 + be*(-5882 + 15*be*(-68 + 31*be))))*u12**2 + 
                 28*(-14586 + be*(-3315 + be*(3944 + 15*be*(323 + 100*be))))*u12**4 + 
                 48*(7293 + be*(11713 + be*(10880 + 7*be*(663 + 101*be))))*u12**6) + 
              2*k1*k2*u12*(7293*(1 - 7*u12**2 + 24*u12**4) + 2652*be*(2 - 21*u12**2 + 189*u12**4) + 
                21*be**4*(5 + 805*u12**2 + 2224*u12**4 + 728*u12**6) + 68*be**3*(-30 + 1105*u12**2 + 3137*u12**4 + 954*u12**6) + 
                 34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6)) + 
              k2**2*(7293*(-1 + 7*u12**2 + 12*u12**4) + 2652*be*(-5 + 39*u12**2 + 136*u12**4) + 
                 204*be**3*(-5 + 135*u12**2 + 1040*u12**4 + 552*u12**6) + 34*be**2*(-211 + 2277*u12**2 + 13204*u12**4 + 2160*u12**6) + 
                 9*be**4*(-5 + 435*u12**2 + 3940*u12**4 + 3960*u12**6 + 448*u12**8))) + 
           238*b1**3*be*k2**2*(14*k1**3*k2*u12*(7293 - 3003*be - 1989*be**2 - 365*be**3 + 13*(-1947 + be*(825 + be*(1107 + 335*be)))*u12**2 + 
                12*(3861 + be*(5148 + be*(3939 + 1120*be)))*u12**4) + 
              14*k1**4*(be*(429 - 5*be*(39 + 29*be)) + 3*be*(-2717 + be*(-403 + 245*be))*u12**2 + 
                 18*(1287 + be*(1716 + be*(1183 + 290*be)))*u12**4 + 429*(11 - 43*u12**2)) + 
              7*k2**4*u12**2*(429*(-5 + 27*u12**2) + be*(3*(6 + be)*(-286 + 5*(-26 + be)*be) + 
                   (36036 + be*(33618 + 5*be*(2308 + 323*be)))*u12**2 + 8*be*(1170 + be*(1500 + 379*be))*u12**4 + 504*be**3*u12**6)) + 
              2*k1*k2**3*u12*(3003*(3 - 13*u12**2 + 54*u12**4) + 39*be**2*(4 + 17*u12**2)*(-41 + 431*u12**2 + 120*u12**4) + 
                 429*be*(2 - 23*u12**2 + 903*u12**4) + be**3*(-998 + 17971*u12**2 + 113597*u12**4 + 72780*u12**6) + 
                 be**4*(-45 + 2270*u12**2 + 17281*u12**4 + 15144*u12**6 + 1512*u12**8)) + 
              k1**2*k2**2*(3003*(11 - 41*u12**2 + 76*u12**4 + 108*u12**6) + 
                 3*be**4*(1 + 6*u12**2)*(-5 + 135*u12**2 + 1040*u12**4 + 552*u12**6) + 858*be*(8 - 175*u12**2 + 923*u12**4 + 630*u12**6) + 
                 78*be**2*(-15 - 728*u12**2 + 7733*u12**4 + 6570*u12**6 + 720*u12**8) + 
                 2*be**3*(-524 + 719*u12**2 + 70549*u12**4 + 111366*u12**6 + 21240*u12**8))) - 
          2652*b1*k1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))*
            (154*(21 + be*(22 + 9*be))*k1**3*(-1 + 3*u12**2) + 308*(21 + be*(22 + 9*be))*k1**2*k2*u12*(-1 + 3*u12**2) + 
              k1*k2**2*(-5*be*(363 + be*(143 + be)) + be*(1331 + be*(715 + 9*be))*u12**2 + 2*(4851 + be*(6171 + be*(2673 + 185*be)))*u12**4 + 
                 48*be**2*(33 + 17*be)*u12**6 + 1617*(-1 + u12**2)) + 
              7*k2**3*u12*(231*(-1 + 3*u12**2) + be*(363*(-1 + 3*u12**2) + be*(-121 - 5*be + (451 + 39*be)*u12**2 + 8*(33 + 17*be)*u12**4))))\
            + 17*b1**2*(84084*(21 + be*(22 + 9*be))*k1**6*(-1 + 3*u12**2) + 336336*(21 + be*(22 + 9*be))*k1**5*k2*u12*(-1 + 3*u12**2) + 
              28*k1**3*k2**3*u12*(63063*(-3 + 5*u12**2 + 12*u12**4) - 35*(b2 + b4)*be**4*(-73 + 871*u12**2 + 2688*u12**4) + 
                 429*be*(-17*(33 + 7*b2 + 7*b4) + (935 + 413*b2 + 413*b4)*u12**2 - 12*(-187 + 63*b2 + 63*b4)*u12**4) - 
                117*be**3*(15 - 119*b2 - 119*b4 - 97*u12**2 + 861*(b2 + b4)*u12**2 + 4*(-141 + 707*b2 + 707*b4)*u12**4 - 544*u12**6) - 
                 429*be**2*(207 - 49*b2 - 49*b4 - 417*u12**2 + 175*(b2 + b4)*u12**2 + 12*(-95 + 84*b2 + 84*b4)*u12**4 - 288*u12**6)) + 
             49*k2**6*u12**2*(9009*(-1 + 3*u12**2) + 18876*be*(-1 + 3*u12**2) + 858*be**2*(-11 + 41*u12**2 + 24*u12**4) + 
                 156*be**3*(-5 + 39*u12**2 + 136*u12**4) + be**4*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6)) - 
              28*k1**4*k2**2*(-63063*(-1 - 3*u12**2 + 18*u12**4) + 35*(b2 + b4)*be**4*(-29 + 147*u12**2 + 1044*u12**4) + 
                 39*be**3*(5 - 35*b2 - 35*b4 - 9*u12**2 - 217*(b2 + b4)*u12**2 + 2*(-185 + 1911*b2 + 1911*b4)*u12**4 - 816*u12**6) + 
                429*be**2*(65 + 7*b2 + 7*b4 + 187*u12**2 - 133*(b2 + b4)*u12**2 + 18*(-69 + 28*b2 + 28*b4)*u12**4 - 144*u12**6) + 
                 429*be*(77*b2 - 301*(b2 + b4)*u12**2 + 54*(-55 + 7*b2 + 7*b4)*u12**4 + 11*(15 + 7*b4 + 45*u12**2))) + 
              14*k1*k2**5*u12*(63063*(-1 + u12**2 + 6*u12**4) - 
                 858*be*(121 - 25*b2 - 35*b4 + (-99 + 125*b2 + 189*b4)*u12**2 + 18*(-44 + 3*b2)*u12**4) - 
                 858*be**2*(44 - 45*b2 - 63*b4 + 9*(-6 + 33*b2 + 49*b4)*u12**2 + 2*(-253 + 63*b2)*u12**4 - 240*u12**6) - 
                 78*be**3*(25 - 205*b2 - 287*b4 + (-115 + 2073*b2 + 3017*b4)*u12**2 + 2*(-652 + 731*b2 + 420*b4)*u12**4 + 
                    16*(-136 + 15*b2)*u12**6) + be**4*(-70*b4*(-15 + 577*u12**2 + 600*u12**4) - 
                   10*b2*(5 + 2*u12**2)*(-15 + 577*u12**2 + 600*u12**4) + (1 + 6*u12**2)*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6))) - 
              k1**2*k2**4*(-441441*(-1 - 9*u12**2 + 32*u12**4 + 12*u12**6) + 
                 12012*be*(11*(4 + 5*b2 + 7*b4) + (528 - 263*b2 - 371*b4)*u12**2 + 2*(-880 + 281*b2 + 378*b4)*u12**4 + 
                    12*(-55 + 9*b2)*u12**6) + 156*be**3*(-5*(-4 + 35*b2 + 49*b4) - 7*(-72 + 739*b2 + 791*b4)*u12**2 + 
                    2*(-2696 + 30457*b2 + 34496*b4)*u12**4 + 12*(-1691 + 1617*b2 + 980*b4)*u12**6 - 8160*u12**8) + 
                 858*be**2*(239 + 70*b2 + 98*b4 + (2431 - 3066*b2 - 3626*b4)*u12**2 + 196*(-54 + 86*b2 + 99*b4)*u12**4 + 
                    12*(-863 + 168*b2)*u12**6 - 2016*u12**8) + 
                 be**4*(-((1 + 6*u12**2)**2*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6)) + 
                    980*b4*(-29 + 117*u12**2 + 2198*u12**4 + 1200*u12**6) + 140*b2*(-145 + 467*u12**2 + 13592*u12**4 + 10488*u12**6))))))/
       (6.0035976e7*b1**4*k1**2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
      
       
# Second Z1^2 Z2^2 term in Eq. 25
# @jit(nopython=True)
def e44o44_2(u12,k1,k2):

    if(l1==0 and l2==0):
        return((49*b1**4*be**2*k1**2*k2**2*(6*(1001 + be*(858 + be*(286 + 5*be*(26 + 5*be))))*k1*k2 + 
            (-3003 + be*(-2574 + be*(3146 + 105*be*(26 + 5*be))))*(k1**2 + k2**2)*u12 + 
            12*(-1001 + be*(429 + be*(2002 + 5*be*(221 + 45*be))))*k1*k2*u12**2 + 
            2*(6006 + be*(14157 + be*(11154 + 35*be*(143 + 30*be))))*(k1**2 + k2**2)*u12**3 + 
            8*(3003 + 2*be*(2574 + be*(1859 + 5*be*(208 + 45*be))))*k1*k2*u12**4 + 8*be**2*(572 + 35*be*(13 + 3*be))*(k1**2 + k2**2)*u12**5 + 
            32*be**2*(143 + 5*be*(13 + 3*be))*k1*k2*u12**6) + 
         182*b1**3*be*(231*(-35 + be*(-21 + be*(3 + be)))*k1**5*k2 + (-8085 + be*(-5082 + be*(594 + be*(286 + 15*be))))*k1**3*k2**3 + 
            231*(-35 + be*(-21 + be*(3 + be)))*k1*k2**5 + 
            (k1**2 + k2**2)*(231*(1 + be)*(35 + be*(28 + 5*be))*k1**4 + (-24255 + be*(-19866 + be*(-1881 + 10*be*(44 + 9*be))))*k1**2*k2**2 + 
               231*(1 + be)*(35 + be*(28 + 5*be))*k2**4)*u12 + 
            3*k1*k2*(154*(70 + 3*be*(35 + be*(16 + 3*be)))*k1**4 + (2695 + be*(9548 + be*(8052 + 5*be*(528 + 53*be))))*k1**2*k2**2 + 
               154*(70 + 3*be*(35 + be*(16 + 3*be)))*k2**4)*u12**2 + 
            (k1**2 + k2**2)*(308*be**2*(9 + 5*be)*k1**4 + (48510 + be*(68376 + 5*be*(6237 + be*(1826 + 191*be))))*k1**2*k2**2 + 
               308*be**2*(9 + 5*be)*k2**4)*u12**3 + 4*k1*k2*
             (231*be**2*(9 + 4*be)*k1**4 + (8085 + be*(11088 + be*(7425 + 26*be*(143 + 25*be))))*k1**2*k2**2 + 231*be**2*(9 + 4*be)*k2**4)*
             u12**4 + 4*be**2*(3069 + 10*be*(165 + 26*be))*k1**2*k2**2*(k1**2 + k2**2)*u12**5 + 
            8*be**2*(990 + be*(484 + 125*be))*k1**3*k2**3*u12**6 + 120*be**4*k1**2*k2**2*(k1**2 + k2**2)*u12**7) - 
         858*b1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12)*((2205 + be*(1505 + be*(175 + 3*be)))*k1*k2*(k1**2 + k2**2) + 
               7*((105 + be*(105 + be*(35 + 3*be)))*k1**4 + 56*(15 + be*(10 + be))*k1**2*k2**2 + (105 + be*(105 + be*(35 + 3*be)))*k2**4)*
                u12 + 2*(735 + be*(595 + be*(287 + 15*be)))*k1*k2*(k1**2 + k2**2)*u12**2 + 
               28*be**2*((7 + 3*be)*k1**4 + 28*k1**2*k2**2 + (7 + 3*be)*k2**4)*u12**3 + 8*be**2*(35 + 9*be)*k1*k2*(k1**2 + k2**2)*u12**4) + 
            b2*(7*(1785 + be*(1225 + 3*be*(49 + be)))*k1**5*k2 + 2*(13965 + be*(9485 + 3*be*(357 + 5*be)))*k1**3*k2**3 + 
               7*(1785 + be*(1225 + 3*be*(49 + be)))*k1*k2**5 + 
               49*(k1**2 + k2**2)*((105 + be*(105 + be*(35 + 3*be)))*k1**4 + 88*(15 + be*(10 + be))*k1**2*k2**2 + 
                  (105 + be*(105 + be*(35 + 3*be)))*k2**4)*u12 + 
               4*k1*k2*(7*(840 + be*(21 + 2*be)*(35 + 9*be))*k1**4 + 2*(12495 + be*(8610 + be*(1540 + 39*be)))*k1**2*k2**2 + 
                  7*(840 + be*(21 + 2*be)*(35 + 9*be))*k2**4)*u12**2 + 
               98*(k1**2 + k2**2)*(2*be**2*(7 + 3*be)*k1**4 + 3*(95 + be*(75 + be*(45 + be)))*k1**2*k2**2 + 2*be**2*(7 + 3*be)*k2**4)*
                u12**3 + 56*k1*k2*(be**2*(91 + 30*be)*k1**4 + (105 + be*(85 + 3*be*(91 + 5*be)))*k1**2*k2**2 + be**2*(91 + 30*be)*k2**4)*
                u12**4 + 392*be**2*(13 + 3*be)*k1**2*k2**2*(k1**2 + k2**2)*u12**5 + 32*be**2*(35 + 9*be)*k1**3*k2**3*u12**6)) + 
         12012*k1*k2*(15 + be*(10 + be + 2*be*u12**2))*(7*b2*k2**2 + 7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + 
            b2*k1*(14*k2*u12 + k1*(5 + 2*u12**2)))*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2)))\
          - 143*b1**2*(98*k1**6*u12*(-315 + 105*(-3 + b2 + b4)*be + 21*be**2*(-5 + 9*b2 + 9*b4 - 4*u12**2) + 
               5*(b2 + b4)*be**4*(3 + 4*u12**2) + 9*be**3*(-1 + 11*b2 + 11*b4 + 4*(-1 + b2 + b4)*u12**2)) + 
            98*k2**6*u12*(-315 + 105*(-3 + b2 + b4)*be + 21*be**2*(-5 + 9*b2 + 9*b4 - 4*u12**2) + 5*(b2 + b4)*be**4*(3 + 4*u12**2) + 
               9*be**3*(-1 + 11*b2 + 11*b4 + 4*(-1 + b2 + b4)*u12**2)) + 
            42*k1**5*k2*(-735*(1 + 4*u12**2) + 35*be*(-15 - 7*b2 - 7*b4 + 4*(-19 + 7*b2 + 7*b4)*u12**2) + 
               7*be**2*(-11 - 21*b2 - 21*b4 - 124*u12**2 + 210*(b2 + b4)*u12**2 - 96*u12**4) + 
               7*(b2 + b4)*be**4*(1 + 18*u12**2 + 16*u12**4) + 
               3*be**3*(-1 + 7*b2 + 7*b4 + 8*(-3 + 28*b2 + 28*b4)*u12**2 + 4*(-20 + 21*b2 + 21*b4)*u12**4)) + 
            42*k1*k2**5*(-735*(1 + 4*u12**2) + 35*be*(-15 - 7*b2 - 7*b4 + 4*(-19 + 7*b2 + 7*b4)*u12**2) + 
               7*be**2*(-11 - 21*b2 - 21*b4 - 124*u12**2 + 210*(b2 + b4)*u12**2 - 96*u12**4) + 
               7*(b2 + b4)*be**4*(1 + 18*u12**2 + 16*u12**4) + 
               3*be**3*(-1 + 7*b2 + 7*b4 + 8*(-3 + 28*b2 + 28*b4)*u12**2 + 4*(-20 + 21*b2 + 21*b4)*u12**4)) + 
            7*k1**4*k2**2*u12*(-2205*(13 + 10*u12**2) + 210*be*(-97 - 9*b2 - 7*b4 + 2*(-46 + 15*b2 + 14*b4)*u12**2) + 
               42*be**2*(-70 + 3*b2 + 21*b4 + 2*(-115 + 93*b2 + 84*b4)*u12**2 - 120*u12**4) + 
               18*be**3*(-7 + 69*b2 + 91*b4 + 14*(-4 + 13*b2 + 12*b4)*u12**2 + 8*(-14 + 8*b2 + 7*b4)*u12**4) + 
               be**4*(3*(-1 + 78*b2 + 98*b4) + 2*(-21 + 466*b2 + 476*b4)*u12**2 + 8*(-19 + 38*b2 + 28*b4)*u12**4 - 48*u12**6)) + 
            7*k1**2*k2**4*u12*(-2205*(13 + 10*u12**2) + 210*be*(-97 - 9*b2 - 7*b4 + 2*(-46 + 15*b2 + 14*b4)*u12**2) + 
               42*be**2*(-70 + 3*b2 + 21*b4 + 2*(-115 + 93*b2 + 84*b4)*u12**2 - 120*u12**4) + 
               18*be**3*(-7 + 69*b2 + 91*b4 + 14*(-4 + 13*b2 + 12*b4)*u12**2 + 8*(-14 + 8*b2 + 7*b4)*u12**4) + 
               be**4*(3*(-1 + 78*b2 + 98*b4) + 2*(-21 + 466*b2 + 476*b4)*u12**2 + 8*(-19 + 38*b2 + 28*b4)*u12**4 - 48*u12**6)) + 
            k1**3*k2**3*(-15435*(5 + u12**2)*(1 + 4*u12**2) + 
               2940*be*(-18 - 5*b2 - 7*b4 + (-81 + 8*b2 + 14*b4)*u12**2 + 4*(-5 + b2)*u12**4) + 
               42*be**2*(-151 - 210*b2 - 294*b4 + 7*(-175 + 108*b2 + 168*b4)*u12**2 + 24*(-73 + 14*b2)*u12**4 - 400*u12**6) + 
               36*be**3*(-4 + 35*b2 + 49*b4 + (-99 + 364*b2 + 490*b4)*u12**2 + 28*(-14 + 10*b2 + 7*b4)*u12**4 + 8*(-30 + 7*b2)*u12**6) + 
               be**4*(-1 + 140*b2 + 196*b4 + (-61 + 56*b2)*u12**2 - 36*u12**4)*(3 + 8*u12**2*(3 + u12**2)))))/
       (8.82882e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))

    if(l1==0 and l2==2):
        return((be*(1716*k1*k2*(7 + be + (21 + 11*be)*u12**2)*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + 
              b2*(7*k2**2 + 14*k1*k2*u12 + k1**2*(5 + 2*u12**2)))*
            (7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2))) - 
           26*b1**2*(49*k2**6*u12*(462*b2 + 231*(-3 + 2*b4 - 2*be) + 891*(b2 + b4)*be + 33*(-1 + 16*b2 + 16*b4)*be**2 + 75*(b2 + b4)*be**3 + 
                 (-693 + be*(297*b2 + 33*(-22 + 9*b4 - 9*be) + 462*(b2 + b4)*be + 205*(b2 + b4)*be**2))*u12**2) + 
              98*k1**6*u12*(231*(b2 + b4) + 33*(2 + 9*b2 + 9*b4)*be + 99*(b2 + b4)*be**2 + 15*(b2 + b4)*be**3 + 
                 (-693 + 33*(-20 + 9*b2 + 9*b4)*be + 99*(-1 + 4*b2 + 4*b4)*be**2 + 95*(b2 + b4)*be**3)*u12**2 + 
                 6*be**2*(-11 + 5*(b2 + b4)*be)*u12**4) + 
              7*k1**2*k2**4*u12*(-462*(9*b2 + 7*(4 + b4)) - 33*(115 + 33*b2 - 21*b4)*be + 66*(-3 + 40*b2 + 56*b4)*be**2 + 
                 3*(-1 + 153*b2 + 203*b4)*be**3 + (924*(-52 + 15*b2 + 14*b4) + 33*(-851 + 519*b2 + 483*b4)*be + 
                    66*(-41 + 135*b2 + 133*b4)*be**2 + (-87 + 3107*b2 + 3367*b4)*be**3)*u12**2 + 
                 2*(-13167 + 99*(-119 + 45*b2 + 42*b4)*be + 231*(-17 + 20*b2 + 18*b4)*be**2 + (-241 + 1157*b2 + 952*b4)*be**3)*u12**4 - 
                 24*be**2*(33 + 17*be)*u12**6) + 7*k1**4*k2**2*u12*
               (231*(-41 + 24*b2 + 28*b4) + 33*(-25 + 174*b2 + 210*b4)*be + 33*(-1 + 44*b2 + 56*b4)*be**2 + 3*(-1 + 78*b2 + 98*b4)*be**3 + 
                 (4158*b2 + 33*(-1225 + 98*b4 - 653*be) + 9702*(b2 + b4)*be + 99*(-17 + 114*b2 + 126*b4)*be**2 + 
                    (-87 + 2942*b2 + 3262*b4)*be**3)*u12**2 + 
                 2*(-18711 + 99*(-167 + 48*b2 + 42*b4)*be + 33*(-105 + 122*b2 + 98*b4)*be**2 + (-241 + 1292*b2 + 1162*b4)*be**3)*u12**4 + 
                 24*be**2*(-121 + (-17 + 5*b2)*be)*u12**6) + 
              21*k1**5*k2*(539*b4 + 7*(77*b2 + 66*(b2 + b4)*be + 11*(b2 + b4)*be**2 + 2*(b2 + b4)*be**3) + 
                 11*(-2*be*(17 + 3*be) + 7*b2*(35 + 3*be*(16 + be*(9 + 2*be))) + 7*b4*(35 + 3*be*(16 + be*(9 + 2*be))))*u12**2 + 
                 2*(-5544 + 33*(-148 + 63*b2 + 63*b4)*be + 341*(-2 + 7*b2 + 7*b4)*be**2 + 602*(b2 + b4)*be**3)*u12**4 + 
                 40*be**2*(-22 + 7*(b2 + b4)*be)*u12**6 - 22*(21 + be + 112*u12**2)) + 
              k1**3*k2**3*(-3*(9702 + be*(1661 + be*(44 + be))) - 3*(72765 + be*(27038 + be*(1573 + 84*be)))*u12**2 - 
                 (425271 + be*(282051 + be*(43593 + 4385*be)))*u12**4 - 4*(24255 + be*(24387 + 2*be*(5082 + 829*be)))*u12**6 - 
                 144*be**2*(55 + 17*be)*u12**8 + 49*b4*(3*(-77 + be*(-66 + be*(11 + 4*be))) + 3*(385 + be*(462 + be*(297 + 92*be)))*u12**2 + 
                    4*be*(297 + 4*be*(66 + 17*be))*u12**4) + 
                 7*b2*(5 + 2*u12**2)*(3*(-77 + be*(-66 + be*(11 + 4*be))) + 3*(385 + be*(462 + be*(297 + 92*be)))*u12**2 + 
                    4*be*(297 + 4*be*(66 + 17*be))*u12**4)) + 
             21*k1*k2**5*(11*(-63 - be*(20 + be) - (623 + be*(376 + 29*be))*u12**2 - 12*(49 + be*(44 + 15*be))*u12**4) + 
                 14*b2*(-77 - 66*be + be**3 + 2*(154 + be*(231 + be*(121 + 24*be)))*u12**2 + be*(198 + be*(253 + 91*be))*u12**4) + 
                 14*b4*(-77 - 66*be + be**3 + 2*(154 + be*(231 + be*(121 + 24*be)))*u12**2 + be*(198 + be*(253 + 91*be))*u12**4))) + 
           7*b1**3*(1092*k1*k2**5*(-77 - 66*be + be**3 + 2*(154 + be*(231 + be*(121 + 24*be)))*u12**2 + be*(198 + be*(253 + 91*be))*u12**4) + 
              546*k1**5*k2*(77 + 66*be + 11*be**2 + 2*be**3 + 11*(35 + 3*be*(16 + be*(9 + 2*be)))*u12**2 + 
                 2*be*(297 + be*(341 + 86*be))*u12**4 + 40*be**3*u12**6) + 
              364*k1**6*u12*(231 + 297*be*(1 + u12**2) + 99*be**2*(1 + 4*u12**2) + 5*be**3*(3 + u12**2)*(1 + 6*u12**2)) + 
              182*k2**6*u12*(462 + 297*be*(3 + u12**2) + 66*be**2*(8 + 7*u12**2) + 5*be**3*(15 + 41*u12**2)) + 
              k1**2*k2**4*u12*(21021*(-5 + 21*u12**2) + 429*be*(-109 + 1483*u12**2 + 810*u12**4) + 
                 429*be**2*(125 + 963*u12**2 + 1012*u12**4) + 65*be**3*(209 + 2309*u12**2 + 2826*u12**4 + 144*u12**6) + 
                 20*be**4*(36 + 655*u12**2 + 1214*u12**4 + 300*u12**6)) + 
              k1**4*k2**2*u12*(84084*(1 + 3*u12**2) + 429*be*(215 + 961*u12**2 + 1008*u12**4) + 429*be**2*(79 + 845*u12**2 + 1176*u12**4) + 
                 65*be**3*(113 + 1883*u12**2 + 3084*u12**4 + 408*u12**6) + 5*be**4*(81 + 1927*u12**2 + 5108*u12**4 + 1704*u12**6)) + 
              k1**3*k2**3*(21021*(-1 + 7*u12**2 + 10*u12**4) + 858*be*(-22 + 313*u12**2 + 579*u12**4 + 306*u12**6) + 
                 858*be**2*(3 + 261*u12**2 + 640*u12**4 + 356*u12**6) + 
                 26*be**3*(52 + 2865*u12**2 + 10609*u12**4 + 5714*u12**6 + 360*u12**8) + 
                 5*be**4*(15 + 1371*u12**2 + 8558*u12**4 + 7264*u12**6 + 432*u12**8))) - 
           858*b1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12)*(56*k1**2*k2**2*u12*(7 + be + (21 + 11*be)*u12**2) + 
                 7*k2**4*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
                 k1*k2**3*(161 + 34*be + be**2 + (623 + be*(334 + 15*be))*u12**2 + 2*(147 + be*(110 + 27*be))*u12**4) + 
                 14*k1**4*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) + 
                 2*k1**3*k2*(70 + 8*be + (259 + be*(122 + 3*be))*u12**2 + 2*(105 + 2*be*(41 + 5*be))*u12**4 + 12*be**2*u12**6)) + 
             b2*(49*k2**6*u12*(21 + 14*be + be**2 + (21 + be*(22 + 9*be))*u12**2) + 
                 7*k1*k2**5*(133 + 30*be + be**2 + (861 + be*(490 + 29*be))*u12**2 + 4*(168 + be*(143 + 45*be))*u12**4) + 
                 7*k1**2*k2**4*u12*(763 + 186*be + 7*be**2 + (2457 + 11*be*(122 + 7*be))*u12**2 + 2*(399 + be*(286 + 63*be))*u12**4) + 
                 98*k1**6*(-2*be*u12 + (21 + be*(20 + 3*be))*u12**3 + 2*be**2*u12**5) + 
                 14*k1**4*k2**2*u12*(308 + 30*be + (1155 + be*(608 + 21*be))*u12**2 + 2*(273 + 206*be + 28*be**2)*u12**4 + 28*be**2*u12**6) + 
                 14*k1**5*k2*(56 + 6*be + (21 + be)*(11 + 3*be)*u12**2 + 2*(273 + be*(233 + 31*be))*u12**4 + 40*be**2*u12**6) + 
                 k1**3*k2**3*(1897 + 306*be + 5*be**2 + (12579 + be*(4334 + 107*be))*u12**2 + 4*(5285 + 32*be*(93 + 4*be))*u12**4 + 
                    4*(357 + be*(274 + 77*be))*u12**6 + 48*be**2*u12**8))) + 
           49*b1**4*be*k1**2*k2**2*(2*k1*k2*(429 + 3*be*(143 + be*(52 + 5*be*(5 + be))) + 
                 3*(-286 + be*(1001 + be*(1703 + 5*be*(187 + 39*be))))*u12**2 + 
                 (5577 + be*(10296 + be*(12259 + 20*be*(368 + 81*be))))*u12**4 + 4*be*(858 + be*(1079 + 2*be*(295 + 69*be)))*u12**6) + 
              k1**2*u12*(858*(-5 + 11*u12**2) + 429*be*(-11 + 35*u12**2 + 16*u12**4) + 13*be**2*(-31 + 747*u12**2 + 964*u12**4) + 
                 21*be**4*(5 + 55*u12**2 + 64*u12**4 + 8*u12**6) + 5*be**3*(87 + 1069*u12**2 + 1220*u12**4 + 144*u12**6)) + 
              k2**2*u12*(429*(-1 + 13*u12**2) + be*(7*be*(221 + 15*be*(11 + 2*be)) + be*(14001 + 35*be*(199 + 42*be))*u12**2 + 
                    4*(858 + be*(1573 + 7*be*(160 + 39*be)))*u12**4 + 429*(1 + 31*u12**2))))))/
       (1.765764e6*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
    if(l1==2 and l2==2):
        return((5*(49*b1**4*be**2*k1**2*k2**2*(-6*(2431 + be*(2210 + be*(374 + 5*be*(34 + 3*be))))*k1*k2 + 
              (7293 + be*(5304 + be*(-7174 + 15*be*(-136 + 7*be))))*(k1**2 + k2**2)*u12 + 
              6*(26741 + be*(28288 + be*(7514 + 5*be*(952 + 261*be))))*k1*k2*u12**2 + 
             (-51051 + be*(-55692 + be*(77418 + 5*be*(15028 + 3381*be))))*(k1**2 + k2**2)*u12**3 + 
              4*(-58344 + be*(5967 + be*(130016 + 5*be*(16099 + 3546*be))))*k1*k2*u12**4 + 
              4*(43758 + be*(125307 + be*(112234 + be*(53329 + 11676*be))))*(k1**2 + k2**2)*u12**5 + 
              16*(21879 + be*(45084 + be*(34306 + be*(19924 + 4455*be))))*k1*k2*u12**6 + 
              24*be**2*(3060 + be*(2703 + 637*be))*(k1**2 + k2**2)*u12**7 + 288*be**2*(255 + 7*be*(17 + 4*be))*k1*k2*u12**8) + 
           238*b1**3*be*(-21*(-1573 + be*(-1287 + be*(65 + 11*be)))*k1**5*k2 + 
              (33033 - be*(-27456 + be*(1170 + be*(376 + 15*be))))*k1**3*k2**3 - 21*(-1573 + be*(-1287 + be*(65 + 11*be)))*k1*k2**5 - 
              (k1**2 + k2**2)*(21*(715 + be*(1287 + be*(533 + 25*be)))*k1**4 + 
                (-90090 + be*(-81939 + be*(-2067 + 5*be*(187 + 9*be))))*k1**2*k2**2 + 21*(715 + be*(1287 + be*(533 + 25*be)))*k2**4)*u12 + 
             3*k1*k2*(7*(-7579 + be*(-8151 + be*(-637 + 207*be)))*k1**4 + 
                2*(-13013 + be*(-17017 + be*(-3237 + 5*be*(85 + 14*be))))*k1**2*k2**2 + 7*(-7579 + be*(-8151 + be*(-637 + 207*be)))*k2**4)*
               u12**2 + (k1**2 + k2**2)*(7*(11583 + be*(27027 + be*(16809 + 2885*be)))*k1**4 + 
                 2*(-189189 + be*(-216645 + be*(-29796 + 5*be*(857 + 227*be))))*k1**2*k2**2 + 
                 7*(11583 + be*(27027 + be*(16809 + 2885*be)))*k2**4)*u12**3 + 
              k1*k2*(42*(7722 + be*(15015 + be*(7956 + 1627*be)))*k1**4 + 
                 (-15015 + be*(249678 + be*(344760 + be*(134018 + 16855*be))))*k1**2*k2**2 + 
                 42*(7722 + be*(15015 + be*(7956 + 1627*be)))*k2**4)*u12**4 + 
              (k1**2 + k2**2)*(840*be**2*(39 + 25*be)*k1**4 + (486486 + be*(891891 + be*(469365 + be*(148485 + 17281*be))))*k1**2*k2**2 + 
                 840*be**2*(39 + 25*be)*k2**4)*u12**5 + 4*k1*k2*
               (210*be**2*(117 + 59*be)*k1**4 + 13*(6237 + be*(11187 + be*(8031 + be*(4219 + 800*be))))*k1**2*k2**2 + 
                 210*be**2*(117 + 59*be)*k2**4)*u12**6 + 12*be**2*(12090 + be*(7325 + 1262*be))*k1**2*k2**2*(k1**2 + k2**2)*u12**7 + 
             72*be**2*(1300 + be*(710 + 187*be))*k1**3*k2**3*u12**8 + 1512*be**4*k1**2*k2**2*(k1**2 + k2**2)*u12**9) - 
           1326*b1*(7*b4*(k1**2 + k2**2 + 2*k1*k2*u12)*(-((4851 + be*(5203 + be*(341 + 5*be)))*k1*k2*(k1**2 + k2**2)) - 
                 7*((231 + be*(363 + be*(121 + 5*be)))*k1**4 + 88*(1 + be)*(21 + be)*k1**2*k2**2 + (231 + be*(363 + be*(121 + 5*be)))*k2**4)*
                 u12 + (11319 + be*(11495 + be*(1177 + 9*be)))*k1*k2*(k1**2 + k2**2)*u12**2 + 
                 7*((693 + be*(1089 + be*(451 + 39*be)))*k1**4 + 88*(63 + be*(66 + 7*be))*k1**2*k2**2 + 
                    (693 + be*(1089 + be*(451 + 39*be)))*k2**4)*u12**3 + 
                 2*(4851 + be*(6171 + be*(3113 + 185*be)))*k1*k2*(k1**2 + k2**2)*u12**4 + 
                 56*be**2*((33 + 17*be)*k1**4 + 132*k1**2*k2**2 + (33 + 17*be)*k2**4)*u12**5 + 
                 48*be**2*(55 + 17*be)*k1*k2*(k1**2 + k2**2)*u12**6) + 
              b2*(-7*(3927 + be*(4235 + be*(297 + 5*be)))*k1**5*k2 - 2*(30723 + be*(32791 + be*(2013 + 25*be)))*k1**3*k2**3 - 
                7*(3927 + be*(4235 + be*(297 + 5*be)))*k1*k2**5 - 
                 7*(k1**2 + k2**2)*(7*(231 + be*(363 + be*(121 + 5*be)))*k1**4 + 968*(1 + be)*(21 + be)*k1**2*k2**2 + 
                    7*(231 + be*(363 + be*(121 + 5*be)))*k2**4)*u12 + 
                 k1*k2*(-7*(-4389 + be*(-2541 + be*(869 + 61*be)))*k1**4 + 2*(-17787 + be*(-20691 + 5*be*(671 + 7*be)))*k1**2*k2**2 - 
                    7*(-4389 + be*(-2541 + be*(869 + 61*be)))*k2**4)*u12**2 + 
                 7*(k1**2 + k2**2)*(7*(693 + be*(1089 + be*(451 + 39*be)))*k1**4 + 2*(26103 + be*(26499 + (2409 - 35*be)*be))*k1**2*k2**2 + 
                    7*(693 + be*(1089 + be*(451 + 39*be)))*k2**4)*u12**3 + 
                 4*k1*k2*(7*(5544 + be*(7623 + be*(3080 + 229*be)))*k1**4 + 2*(80850 + be*(87241 + be*(16302 + 467*be)))*k1**2*k2**2 + 
                    7*(5544 + be*(7623 + be*(3080 + 229*be)))*k2**4)*u12**4 + 
                 14*(k1**2 + k2**2)*(28*be**2*(33 + 17*be)*k1**4 + (13167 + be*(16335 + be*(9889 + 273*be)))*k1**2*k2**2 + 
                    28*be**2*(33 + 17*be)*k2**4)*u12**5 + 
                 8*k1*k2*(14*be**2*(429 + 170*be)*k1**4 + (4851 + be*(6171 + 5*be*(3685 + 241*be)))*k1**2*k2**2 + 
                   14*be**2*(429 + 170*be)*k2**4)*u12**6 + 112*be**2*(429 + 119*be)*k1**2*k2**2*(k1**2 + k2**2)*u12**7 + 
                 192*be**2*(55 + 17*be)*k1**3*k2**3*u12**8)) + 
           29172*k1*k2*(-21 + 63*u12**2 + be*(-22 - be + (66 + 7*be)*u12**2 + 12*be*u12**4))*
            (7*b2*k2**2 + 7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*k1*(14*k2*u12 + k1*(5 + 2*u12**2)))*
            (7*b4*(k1**2 + k2**2 + 2*k1*k2*u12) + b2*(7*k1**2 + 14*k1*k2*u12 + k2**2*(5 + 2*u12**2))) - 
           17*b1**2*(98*k1**6*u12*(-9009*(-1 + 3*u12**2) + 429*be*(33 - 5*b2 - 5*b4 + 9*(-11 + 3*b2 + 3*b4)*u12**2) + 
                 429*be**2*(11 - 9*b2 - 9*b4 + (-41 + 63*b2 + 63*b4)*u12**2 - 24*u12**4) + 
                 5*(b2 + b4)*be**4*(-15 + 577*u12**2 + 600*u12**4) + 
                 39*be**3*(5 - 41*b2 - 41*b4 - 39*u12**2 + 431*(b2 + b4)*u12**2 + 8*(-17 + 15*b2 + 15*b4)*u12**4)) + 
              98*k2**6*u12*(-9009*(-1 + 3*u12**2) + 429*be*(33 - 5*b2 - 5*b4 + 9*(-11 + 3*b2 + 3*b4)*u12**2) + 
                 429*be**2*(11 - 9*b2 - 9*b4 + (-41 + 63*b2 + 63*b4)*u12**2 - 24*u12**4) + 
                5*(b2 + b4)*be**4*(-15 + 577*u12**2 + 600*u12**4) + 
                 39*be**3*(5 - 41*b2 - 41*b4 - 39*u12**2 + 431*(b2 + b4)*u12**2 + 8*(-17 + 15*b2 + 15*b4)*u12**4)) + 
              7*k1**4*k2**2*u12*(-63063*(-13 + 29*u12**2 + 30*u12**4) + 
                 858*be*(1067 + 129*b2 + 119*b4 - (2189 + 477*b2 + 413*b4)*u12**2 + 6*(-506 + 135*b2 + 126*b4)*u12**4) + 
                 858*be**2*(106 + 81*b2 + 63*b4 - (268 + 249*b2 + 105*b4)*u12**2 + 42*(-39 + 31*b2 + 28*b4)*u12**4 - 720*u12**6) + 
                 78*be**3*(35 - 275*b2 - 357*b4 + (-133 + 2535*b2 + 3479*b4)*u12**2 + 2*(-1022 + 3265*b2 + 2954*b4)*u12**4 + 
                    16*(-238 + 120*b2 + 105*b4)*u12**6) + 
                 be**4*(-3*(-11 + 558*b2 + 658*b4) + (-573 + 50138*b2 + 61978*b4)*u12**2 + 2*(-4309 + 76658*b2 + 76888*b4)*u12**4 + 
                    24*(-1043 + 1760*b2 + 1260*b4)*u12**6 - 6480*u12**8)) + 
              7*k1**2*k2**4*u12*(-63063*(-13 + 29*u12**2 + 30*u12**4) + 
                 858*be*(1067 + 129*b2 + 119*b4 - (2189 + 477*b2 + 413*b4)*u12**2 + 6*(-506 + 135*b2 + 126*b4)*u12**4) + 
                 858*be**2*(106 + 81*b2 + 63*b4 - (268 + 249*b2 + 105*b4)*u12**2 + 42*(-39 + 31*b2 + 28*b4)*u12**4 - 720*u12**6) + 
                 78*be**3*(35 - 275*b2 - 357*b4 + (-133 + 2535*b2 + 3479*b4)*u12**2 + 2*(-1022 + 3265*b2 + 2954*b4)*u12**4 + 
                    16*(-238 + 120*b2 + 105*b4)*u12**6) + 
                 be**4*(-3*(-11 + 558*b2 + 658*b4) + (-573 + 50138*b2 + 61978*b4)*u12**2 + 2*(-4309 + 76658*b2 + 76888*b4)*u12**4 + 
                    24*(-1043 + 1760*b2 + 1260*b4)*u12**6 - 6480*u12**8)) + 
              k1**3*k2**3*(-441441*(5 + u12**2)*(-1 + 3*u12**2)*(1 + 4*u12**2) + 
                 be**4*(-1 + 140*b2 + 196*b4 + (-61 + 56*b2)*u12**2 - 36*u12**4)*(-33 + 771*u12**2 + 3992*u12**4 + 1080*u12**6) + 
                 12012*be*(11*(18 + 5*b2 + 7*b4) + (297 - 193*b2 - 301*b4)*u12**2 + (-2453 + 184*b2 + 378*b4)*u12**4 + 
                   12*(-55 + 9*b2)*u12**6) + 858*be**2*(193 + 630*b2 + 882*b4 - 2*(-248 + 1239*b2 + 1911*b4)*u12**2 + 
                    3*(-2663 + 1596*b2 + 2744*b4)*u12**4 + 4*(-2867 + 588*b2)*u12**6 - 2400*u12**8) + 
                 156*be**3*(-5*(-4 + 35*b2 + 49*b4) + 7*(37 + 155*b2 + 231*b4)*u12**2 + (-3481 + 13132*b2 + 17738*b4)*u12**4 + 
                   4*(-3407 + 2317*b2 + 1470*b4)*u12**6 + 240*(-34 + 7*b2)*u12**8)) + 
              42*k1**5*k2*(-21021*(-1 - u12**2 + 12*u12**4) + 
                 143*be**2*(17 + 63*b2 + 63*b4 + 145*u12**2 - 399*(b2 + b4)*u12**2 + 6*(-162 + 245*b2 + 245*b4)*u12**4 - 576*u12**6) + 
                 7*(b2 + b4)*be**4*(-11 + 207*u12**2 + 3254*u12**4 + 2360*u12**6) + 
                 13*be**3*(5 - 35*b2 - 35*b4 + 61*u12**2 - 343*(b2 + b4)*u12**2 + 4*(-229 + 2142*b2 + 2142*b4)*u12**4 + 
                    40*(-68 + 63*b2 + 63*b4)*u12**6) + 143*be*
                  (77*b2 - 371*(b2 + b4)*u12**2 + 12*(-209 + 63*b2 + 63*b4)*u12**4 + 11*(15 + 7*b4 + 31*u12**2))) + 
              42*k1*k2**5*(-21021*(-1 - u12**2 + 12*u12**4) + 
                 143*be**2*(17 + 63*b2 + 63*b4 + 145*u12**2 - 399*(b2 + b4)*u12**2 + 6*(-162 + 245*b2 + 245*b4)*u12**4 - 576*u12**6) + 
                 7*(b2 + b4)*be**4*(-11 + 207*u12**2 + 3254*u12**4 + 2360*u12**6) + 
                13*be**3*(5 - 35*b2 - 35*b4 + 61*u12**2 - 343*(b2 + b4)*u12**2 + 4*(-229 + 2142*b2 + 2142*b4)*u12**4 + 
                    40*(-68 + 63*b2 + 63*b4)*u12**6) + 143*be*
                  (77*b2 - 371*(b2 + b4)*u12**2 + 12*(-209 + 63*b2 + 63*b4)*u12**4 + 11*(15 + 7*b4 + 31*u12**2))))))/
       (6.0035976e7*b1**4*k1*k2*(k1**2 + k2**2 + 2*k1*k2*u12)**2))
    
# Z3 term in Eq. 25
# @jit(nopython=True)
def ez3(k1,k2):
    if(l1==0 and l2==0):
        if(k1!=k2):
            return(-(be*(4*k1*k2*(1155*be**3*k1**14 + 70*be*(693 + be*(891 + 253*be + 9*b1*(198 + be*(132 + 25*be))))*k1**12*k2**2 + 
               21*(11550*(1 + 6*b1) + 770*(19 + 144*b1)*be + 990*(7 + 68*b1)*be**2 + 33*(37 + 720*b1)*be**3 + 4000*b1*be**4)*k1**10*k2**4 - 
               2*(80850*(1 - 60*b1 + 84*b2 + 84*b4) + 3234*(51 - 1880*b1 + 2660*b2 + 2660*b4)*be + 
                  4158*(31 - 663*b1 + 980*b2 + 980*b4)*be**2 + 11*(2845 - 37884*b1 + 74088*b2 + 74088*b4)*be**3 + 56175*b1*be**4)*k1**8*k2**6\
                + (662970*(5 + 7*be) + 11*be**2*(232470 + 50797*be) + 3696*b1**2*be*(35 + 3*be*(14 + 5*be))**2 + 
                  12*b1*(256025 + be*(970200 + be*(1086393 + 501886*be + 89370*be**2))))*k1**6*k2**8 - 
               42*(11550 + 385*(29 + 72*b1)*be + 495*(5 + 68*b1)*be**2 + 11*(11 + 920*b1)*be**3 + 665*b1*be**4)*k1**4*k2**10 - 
               35*be*(2772 + be*(3564 + 913*be + 12*b1*(297 + 2*be*(231 + 65*be))))*k1**2*k2**12 - 210*be**3*(11 + 15*b1*be)*k2**14) + 
            105*(k1 - k2)**3*(k1 + k2)**3*(11*be**3*k1**10 + 6*be*(77 + 33*be*(3 + be) + b1*be*(198 + be*(132 + 25*be)))*k1**8*k2**2 + 
               2*(1155 + 6930*b1 + 11*be*(189 + be*(135 + 34*be)) + 12*b1*be*(924 + be*(693 + 286*be + 50*be**2)))*k1**6*k2**4 + 
               2*(2310 + 484*be**3 + 693*be*(5 + 3*be) + 12*b1*be*(462 + be*(693 + be*(374 + 75*be))))*k1**4*k2**6 + 
               3*be*(308 + be*(396 + 121*be + 4*b1*(99 + 2*be*(77 + 25*be))))*k1**2*k2**8 + 2*be**3*(11 + 15*b1*be)*k2**10)*
             (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(4.07484e7*b1**2*k1**9*k2**7)) + K3kernel(k2, k1)
        else:
            return((2*be*(49*(75*(-3 + 14*b2 + 14*b4) - 317*be) - 14*b1**2*be*(35 + 3*be*(14 + 5*be))**2 + 
           be*(-9*be*(959 + 211*be) + 686*b2*(95 + 9*be*(5 + be)) + 686*b4*(95 + 9*be*(5 + be))) - 
           2*b1*(26950 + be*(47285 + 3*be*(11711 + 615*be*(7 + be))))))/(77175.*b1**2)) + K3kernel(k2, k1)
                    
    if(l1==0 and l2==2):
        if(k1!=k2):
            return(-(be*(4*k1*k2*(105*be**2*(429 + 442*be + 90*b1*be*(13 + 3*be))*k1**14 + 
               70*be*(4901*be**2 + 429*(33 + 41*be) + 9*b1*(7722 + be*(11154 + be*(4979 + 905*be))))*k1**12*k2**2 + 
               21*(5720*(21 + 32*be) + 39*be**2*(2211 + 358*be) + 10*b1*(72072 + be*(95238 + be*(52338 + be*(23829 + 4547*be)))))*k1**10*
                k2**4 - 26*(924*(70 + 5880*b4 + 213*be) + 51744*b2*(7 + 6*be)*(15 + be*(10 + 3*be)) + 
                 be*(be*(168267 + 41290*be) + 51744*b4*(160 + 9*be*(9 + 2*be))) + 
                  3*b1*(-1293600 + be*(-1949794 + be*(-897666 + be*(-119197 + 30145*be)))))*k1**8*k2**6 + 
              (2462460*(14 + 25*be) + 13*be**2*(2907531 + 693898*be) + 192192*b1**2*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) + 
                  6*b1*(5325320 + be*(23621598 + be*(30019990 + be*(15187159 + 2925165*be)))))*k1**6*k2**8 - 
               42*(120120 + 13*be*(8635 + (363 - 301*be)*be) + 5*b1*be*(66924 + be*(77220 + be*(17875 + 53*be))))*k1**4*k2**10 - 
               35*be*(56628 + be*(66495 + 15626*be + 6*b1*(15444 + be*(18603 + 4585*be))))*k1**2*k2**12 - 
               210*be**2*(429 + be*(442 + 15*b1*(39 + 41*be)))*k2**14) + 
            105*(k1 - k2)**3*(k1 + k2)**3*(be**2*(429 + 442*be + 90*b1*be*(13 + 3*be))*k1**10 + 
              6*be*(1573 + 39*be*(55 + 19*be) + b1*(7722 + be*(11154 + be*(5499 + 1025*be))))*k1**8*k2**2 + 
               2*(13*(924 + be*(2376 + be*(1947 + 526*be))) + 6*b1*(12012 + be*(26169 + be*(23595 + be*(11089 + 2075*be)))))*k1**6*k2**4 + 
               2*(24024 + 13*be*(3663 + be*(2508 + 641*be)) + 12*b1*be*(5577 + be*(9867 + be*(5863 + 1275*be))))*k1**4*k2**6 + 
               3*be*(6292 + be*(8151 + 2522*be + 2*b1*(5148 + be*(6721 + 2075*be))))*k1**2*k2**8 + 
               2*be**2*(429 + be*(442 + 15*b1*(39 + 41*be)))*k2**10)*(np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(2.1189168e8*b1**2*k1**9*k2**7)) + K3kernel(k2, k1)
        else:
            return((4*be*(735*(-3 + 14*b2 + 14*b4) - 3976*be - 14*b1**2*be*(1 + be)*(7 + 5*be)*(35 + 3*be*(14 + 5*be)) + 
           be*(-3*be*(823 + 198*be) + 98*b2*(160 + 9*be*(9 + 2*be)) + 98*b4*(160 + 9*be*(9 + 2*be))) - 
           2*b1*(5390 + be*(11095 + be*(9058 + 15*be*(245 + 38*be))))))/(15435.*b1**2)) + K3kernel(k2, k1)
    
    if(l1==2 and l2==2):
        if(k1!=k2):
            return(-(be*(4*k1*k2*(14175*be**3*k1**18 + 210*be*(2574 + be*(3978 + 1358*be + 9*b1*(780 + be*(590 + 117*be))))*k1**16*k2**2 + 
               70*(42471 + be*(78507 + be*(53469 + 13886*be)) + 18*b1*(11583 + be*(24453 + be*(19539 + be*(8326 + 1531*be)))))*k1**14*k2**4 + 
               6*(13*be*(13706 + 3*be*(4074 + 689*be)) + 14*b1*(-321750 + be*(-353925 + be*(-31785 + 4*be*(13305 + 4286*be)))))*k1**12*
                k2**6 - 4*(1915914 + be*(3701412 + 768768*b2*(7 + 3*be)*(7 + 6*be) + 768768*b4*(7 + 3*be)*(7 + 6*be) + 
                     be*(2542644 + 666035*be)) + 3*b1*(-1789788 + be*(-11373362 + be*(-11569272 + be*(-2110349 + 463655*be)))))*k1**10*k2**8\
               + 2*(13543530 + 768768*b1**2*be*(1 + be)**2*(7 + 5*be)**2 + be*(43334148 + be*(40555476 + 11332691*be)) + 
                  6*b1*(9971962 + be*(27333306 + be*(31994248 + be*(17984861 + 3763132*be)))))*k1**8*k2**10 + 
               6*(1486485 + be*(1850849 + be*(718263 + 175438*be)) + 14*b1*(-250965 + be*(-225225 + be*(31785 + be*(64520 + 23917*be)))))*
                k1**6*k2**12 - 14*(424710 + be*(669240 + 5*be*(71136 + 16765*be) + 6*b1*(173745 + be*(293085 + 2*be*(76605 + 14966*be)))))*
               k1**4*k2**14 - 105*be*(10296 + be*(15912 + 5027*be + 12*b1*(1170 + be*(2115 + 719*be))))*k1**2*k2**16 - 
               5670*be**3*(5 + 7*b1*be)*k2**18) + 105*(k1 - k2)**3*(k1 + k2)**3*
             (135*be**3*k1**14 + 2*be*(2574 + be*(3978 + 1538*be + 9*b1*(780 + be*(590 + 117*be))))*k1**12*k2**2 + 
               3*(9438 + be*(22022 + 3*be*(6318 + 1907*be)) + b1*(46332 + 4*be*(24453 + be*(22659 + be*(10686 + 1999*be)))))*k1**10*k2**4 + 
               2*(37752 + be*(87516 + be*(71604 + 20299*be)) + 3*b1*(18876 + be*(83226 + be*(111462 + be*(60194 + 12175*be)))))*k1**8*k2**6 + 
              (66066 + be*(182754 + be*(163566 + 46543*be)) + 12*b1*(16731 + be*(45903 + be*(55731 + be*(33323 + 7500*be)))))*k1**6*k2**8 + 
               6*(9438 + 286*(68 + 81*b1)*be + 78*(192 + 581*b1)*be**2 + (4318 + 31708*b1)*be**3 + 8135*b1*be**4)*k1**4*k2**10 + 
               be*(10296 + be*(15912 + 5747*be + 12*b1*(1170 + be*(2115 + 803*be))))*k1**2*k2**12 + 54*be**3*(5 + 7*b1*be)*k2**14)*
             (np.log((k1 - k2)**2) - 2*np.log(k1 + k2))))/(1.69513344e8*b1**2*k1**11*k2**9)) + K3kernel(k2, k1)
        else:
            return((8*be*(-231 - 14*b1**2*be*(1 + be)**2*(7 + 5*be)**2 + 
           be*(-725 + 28*b2*(7 + 3*be)*(7 + 6*be) + 28*b4*(7 + 3*be)*(7 + 6*be) - 27*be*(25 + 7*be)) - 
           2*b1*(490 + be*(1967 + 5*be*(476 + be*(225 + 38*be))))))/(3087.*b1**2)) + K3kernel(k2, k1)
    
def eK3():
    if (l1 == 0 and l2 == 0):
        return(((3 + be)*(2 + (4*be)/3. + (2*be**2)/5.))/(6.*b1**3))
    
    if (l1 == 0 and l2 == 2):
        return((be*(2 + (4*be)/3. + (2*be**2)/5.))/(3.*b1**3))
        
    if (l1 == 2 and l2 == 2):
        return(8.0*be**2*(7.0+3.0*be)/(63.0*b1**3))
    
def K3kernel(k2, k1):
    if (k1 != k2):
        K3 = (b1*(-18*k1**5*k2 + 48*k1**3*k2**3 - 38*k1*k2**5 + 9*(-k1**2 + k2**2)**3*np.log(np.abs((-k1 + k2))/(k1 + k2))))/(504.*k1**3*k2**3)+(b3*(2*k1*k2*(k1**2 + k2**2)*(3*k1**4 - 14*k1**2*k2**2 + 3*k2**4) + 3*(-k1**2 + k2**2)**4*np.log(np.abs((-k1 + k2))/(k1 + k2))))/(756.*k1**5*k2**3)
    else:
        K3 = (-3*b1 - 8*b3)/189.
        
    K3 += b5 + 78.0/189.0*b1 - 2.0*b3
        
    # K3 = K3 + (-26.0/63.0 + 94.0/63.0 + 272.0/189.0 - 68.0/63.0 - 4.0/3.0 + 220.0/63.0 + 2.0)
        
    return (K3*eK3())